@page "/lobby"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components.Web;
@using System.Text.Json.Serialization;
@inject UserState UserState
<h1>Poker Lobby</h1>

@if (!string.IsNullOrEmpty(warningMessage))
{
    <div class="alert alert-warning" role="alert">
        ⚠️ @warningMessage
    </div>
}

@if (!joined)
{
    <div>
        <label>Table ID:</label>
        <input @bind="tableId" placeholder="Enter or generate..." />

        <button @onclick="CreateTable">Create Table</button>
        <button @onclick="JoinTable">Join Table</button>

        <p>@status</p>
    </div>
}
else
{
    @if (joined && !nicknameSubmitted && !hasAutoSubmittedNickname)
{
    <div>
        <h3>Joined table: @tableId</h3>

        <label>Your nickname:</label>
        <input @bind="nickname" placeholder="Enter nickname..." />
        <button @onclick="SubmitNickname">Submit</button>
    </div>
}

}

@if (joined && nicknameSubmitted)
{
<h3>Joined table: @tableId</h3>
    <div class="mt-4">
        <div class="chat-container">
            <h4>Chat</h4>
            <ul id="chatLog">
                @foreach (var line in chatLog)
                {
                    <li>@line</li>
                }
            </ul>
            <input @bind="messageInput"
            placeholder="Message"
            @onkeydown="HandleChatKeyDown" />
            <button @onclick="SendMessage">Send</button>
        </div>
    </div>
    <div id="chatScroll" style="height: 150px; width: 350px; overflow-y: auto; border: 1px solid #ccc; padding: 8px; background: #fff;">
        @foreach (var (Sender, Message, Timestamp) in chatMessages)
        {
            <div>
                <strong>@Sender</strong>: @Message
            </div>
        }
    </div>
    <div class="poker-table-container">
        <div class="poker-table">
            <div class="community-cards">
                @foreach (var path in findCardPath(communityCards))
                {
                    <img src="@path" class="card-img" />
                }
            </div>
            <div class="players-on-table">
                @for (int i = 0; i < playersOnTable.Count; i++)
                {
                    var player = playersOnTable[i];
                    <div class="player-seat @($"seat-{i}")">
                        <div class="player-name">@player</div>
                        <div class="player-cards player-card">
                            @if (player == nickname)
                            {
                                @foreach (var path in findCardPath(myCards))
                                {
                                    <img src="@path" class="card-img" />
                                }
                            }
                            else if (showdownHands.TryGetValue(player, out var showdownCardStrings))
                            {
                                // Convert showdown card strings to Card objects and use findCardPath
                                var showdownCards = showdownCardStrings.Select(cardStr =>
                                {
                                    var parts = cardStr.Split('-');
                                    return new Card { Suit = parts[0], Rank = parts[1] };
                                }).ToList();

                                foreach (var path in findCardPath(showdownCards))
                                {
                                    <img src="@path" class="card-img" />
                                }
                            }
                            else
                            {
                                <img src="@CardBackPath" class="card-img" />
                                <img src="@CardBackPath" class="card-img" />
                            }
                        </div>
                        <div class="player-wallet">
                            $@(playerWallets.TryGetValue(player, out var wallet) ? wallet : 0)
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="table-pot">
        <strong>Pot:</strong> $@tablePot
    </div>
    <div class="player-actions">
        <button @onclick="@(() => SendPlayerAction("call"))">Call/check</button>
        <button @onclick="@(() => SendPlayerAction("fold"))">Fold</button>
        <button @onclick="@(() => SendPlayerAction("raise"))">Raise</button>
        <input @bind="RaiseAmount" placeholder="0" />
    </div>
    <!-- Debug info for myCards and communityCards -->
    <div>
        <pre>
            myCards: @((myCards == null ? "null" : string.Join(", ", myCards.Select(c => $"{c.Suit}-{c.Rank}"))))
            communityCards: @((communityCards == null ? "null" : string.Join(", ", communityCards.Select(c => $"{c.Suit}-{c.Rank}"))))
        </pre>
    </div>
    <div class="my-cards" style="margin-top: 16px;">
        <strong>Your Cards:</strong>
        @foreach (var path in findCardPath(myCards))
        {
            <img src="@path" class="card-img" />
        }
    </div>
}

@if (isHost)
{
    <button class="btn btn-success" @onclick="StartGame">Start Game</button>
}

@code {
    private string tableId = "";
    private string nickname = "";
    private bool joined = false;
    private string status = "";
    private List<string> chatLog = new();
    private string messageInput = "";
    private string warningMessage = "";
    private bool isHost = false; // Set this based on the player's role
    private string hiddencardFilePath = ""; 
    private string RaiseAmount = "";
    private List<Card> communityCards = new(); // Shared cards
    private List<Card> myCards = new();
    private Dictionary<string, List<Card>> playerCards = new(); // Hole cards per player
    private double gamesWinRation = 0;
    private double gamesWon = 0;
    private double gamesPlayed = 0;
    private double handsWinRation = 0;
    private double handsWon = 0;
    private double handsPlayed = 0;
    private List<string> playersOnTable = new();
    private const string CardBackPath = "Sprites/Card Back 1.png";
    private Dictionary<string, int> playerWallets = new();
    private int tablePot = 0;
    private Dictionary<string, List<string>> showdownHands = new();
    private bool nicknameSubmitted = false;
    private bool hasAutoSubmittedNickname = false;

    // For JS interop instance reference
    private static PokerLobby? _instance;

    public class Card
    {
        [JsonPropertyName("suit")]
        public string Suit { get; set; }
        [JsonPropertyName("rank")]
        public string Rank { get; set; }
    }

    private static readonly Dictionary<(string Suit, string Rank), string> CardImageMap = new()
{
    // Clubs
    { ("Clubs", "2"), "Clubs 2.png" },
    { ("Clubs", "3"), "Clubs 3.png" },
    { ("Clubs", "4"), "Clubs 4.png" },
    { ("Clubs", "5"), "Clubs 5.png" },
    { ("Clubs", "6"), "Clubs 6.png" },
    { ("Clubs", "7"), "Clubs 7.png" },
    { ("Clubs", "8"), "Clubs 8.png" },
    { ("Clubs", "9"), "Clubs 9.png" },
    { ("Clubs", "10"), "Clubs 10.png" },
    { ("Clubs", "J"), "Clubs 11.png" },
    { ("Clubs", "Q"), "Clubs 12.png" },
    { ("Clubs", "K"), "Clubs 13.png" },
    { ("Clubs", "A"), "Clubs 1.png" },

    // Diamonds
    { ("Diamonds", "2"), "Diamonds 2.png" },
    { ("Diamonds", "3"), "Diamonds 3.png" },
    { ("Diamonds", "4"), "Diamonds 4.png" },
    { ("Diamonds", "5"), "Diamonds 5.png" },
    { ("Diamonds", "6"), "Diamonds 6.png" },
    { ("Diamonds", "7"), "Diamonds 7.png" },
    { ("Diamonds", "8"), "Diamonds 8.png" },
    { ("Diamonds", "9"), "Diamonds 9.png" },
    { ("Diamonds", "10"), "Diamonds 10.png" },
    { ("Diamonds", "J"), "Diamonds 11.png" },
    { ("Diamonds", "Q"), "Diamonds 12.png" },
    { ("Diamonds", "K"), "Diamonds 13.png" },
    { ("Diamonds", "A"), "Diamonds 1.png" },

    // Hearts
    { ("Hearts", "2"), "Hearts 2.png" },
    { ("Hearts", "3"), "Hearts 3.png" },
    { ("Hearts", "4"), "Hearts 4.png" },
    { ("Hearts", "5"), "Hearts 5.png" },
    { ("Hearts", "6"), "Hearts 6.png" },
    { ("Hearts", "7"), "Hearts 7.png" },
    { ("Hearts", "8"), "Hearts 8.png" },
    { ("Hearts", "9"), "Hearts 9.png" },
    { ("Hearts", "10"), "Hearts 10.png" },
    { ("Hearts", "J"), "Hearts 11.png" },
    { ("Hearts", "Q"), "Hearts 12.png" },
    { ("Hearts", "K"), "Hearts 13.png" },
    { ("Hearts", "A"), "Hearts 1.png" },

    // Spades
    { ("Spades", "2"), "Spades 2.png" },
    { ("Spades", "3"), "Spades 3.png" },
    { ("Spades", "4"), "Spades 4.png" },
    { ("Spades", "5"), "Spades 5.png" },
    { ("Spades", "6"), "Spades 6.png" },
    { ("Spades", "7"), "Spades 7.png" },
    { ("Spades", "8"), "Spades 8.png" },
    { ("Spades", "9"), "Spades 9.png" },
    { ("Spades", "10"), "Spades 10.png" },
    { ("Spades", "J"), "Spades 11.png" },
    { ("Spades", "Q"), "Spades 12.png" },
    { ("Spades", "K"), "Spades 13.png" },
    { ("Spades", "A"), "Spades 1.png" },
};

    // Helper to convert numeric ranks to face card letters for lookup
    private static string ConvertRank(string rank)
    {
        return rank switch
        {
            "11" => "J",
            "12" => "Q",
            "13" => "K",
            "1"  => "A",
            _    => rank
        };
    }

    private List<string> findCardPath(List<Card> cards)
    {
        var pathList = new List<string>();
        Console.WriteLine($"[DEBUG] findCardPath called with: {(cards == null ? "null" : string.Join(", ", cards.Select(c => $"{c.Suit}-{c.Rank}")))}");
        foreach (var card in cards)
        {
            var key = (card.Suit, ConvertRank(card.Rank));
            if (CardImageMap.TryGetValue(key, out var filename))
            {
                pathList.Add($"Sprites/{filename}");
            }
            else
            {
                Console.WriteLine($"[DEBUG] CardImageMap missing key: {key}");
            }
        }
        return pathList;
    }

    private IJSObjectReference? jsModule;

    // Dummy players list — you'd update this dynamically when players join.
    private List<string> players = new() { "Alice", "Bob" };

    private async Task CreateTable()
    {
        try
        {
            var response = await Http.PostAsync("http://localhost:5005/api/table/create", null);
            var result = await response.Content.ReadFromJsonAsync<CreateTableResponse>();
            tableId = result?.TableId ?? "";
            status = $"Created table: {tableId}";
            joined = true;
            isHost = true; // Set host flag
            if (UserState.IsLoggedIn && !nicknameSubmitted && !hasAutoSubmittedNickname)
            {
                nickname = UserState.DisplayName ?? UserState.Username ?? "Player";
                hasAutoSubmittedNickname = true;
                await SubmitNickname();
            } 

                StateHasChanged();
        }
        catch
        {
            status = "Failed to create table.";
        }
    }

    private async Task JoinTable()
    {
        try
        {
            var response = await Http.GetAsync($"http://localhost:5005/api/table/join/{tableId}");
            if (response.IsSuccessStatusCode)
            {
                status = $"Joined table: {tableId}";
                joined = true;
                isHost = false; // Not the host
                if (UserState.IsLoggedIn && !nicknameSubmitted && !hasAutoSubmittedNickname)
                {
                    nickname = UserState.DisplayName ?? UserState.Username ?? "Player";
                    hasAutoSubmittedNickname = true;
                    await SubmitNickname();
                }
                StateHasChanged();

            }
            else
            {
                status = "Table not found.";
            }
        }
        catch
        {
            status = "Failed to join table.";
        }
    }

    private async Task SubmitNickname()
    {
        if (nicknameSubmitted || string.IsNullOrWhiteSpace(nickname)) return;
        status = $"Nickname set to: {nickname}";
      
        jsModule ??= await JS.InvokeAsync<IJSObjectReference>("import", "/js/pokerLobby.js");

        await jsModule.InvokeVoidAsync(
            "startConnection",
            tableId,
            nickname,
            DotNetObjectReference.Create(this),
            nameof(ReceiveMessage),
            nameof(PlayerJoined)
        );

          nicknameSubmitted = true;


    }

    [JSInvokable]
    public void ReceiveMessage(string player, string message, string timestamp)
    {
        Console.WriteLine($"[DEBUG] JS message: {player}: {message}");
        chatLog.Add($"[{timestamp:HH:mm}] {player}: {message}");
        StateHasChanged();
        _ = JS.InvokeVoidAsync("scrollChatToBottom");
    }

    [JSInvokable]
    public async Task OnJoinFailed(string tableId, string reason)
    {
        warningMessage = $"Table is full or unavailable.";
        Console.WriteLine($"[JOIN FAIL] {reason}");

        // Show banner for 3 seconds, then redirect
        StateHasChanged();
        _ = JS.InvokeVoidAsync("scrollChatToBottom");
        await Task.Delay(3000);
        Nav.NavigateTo("/lobby", forceLoad: true);
    }

    [JSInvokable]
    public void PlayerJoined(string playerName)
    {
        Console.WriteLine($"[DEBUG] Player joined: {playerName}");
        chatLog.Add($"{playerName} joined the table");
        if (!playersOnTable.Contains(playerName))
            playersOnTable.Add(playerName);
        
        StateHasChanged();
        _ = JS.InvokeVoidAsync("scrollChatToBottom");
    }

    private bool DigitsOnly(string s) // Used to make sure raise amount is empty or numbers only
    {
        if (s == null || s == "") return true;

        for (int i = 0; i < s.Length; i++)
            if ((s[i] ^ '0') > 9)
                return false;

        return true;
    }

    private async Task SendMessage()
    {
        var jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/pokerLobby.js");
        await jsModule.InvokeVoidAsync("sendMessage", tableId, nickname, messageInput); // <-- add nickname
        messageInput = ""; // Clear the input field
    }

    private async Task StartGame()
    {
        var jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/pokerLobby.js");
        await jsModule.InvokeVoidAsync("sendMessage", tableId, "System", "!start"); // <-- use "System"
    }

    private async Task SendPlayerAction(string action)
    {
        var jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/pokerLobby.js");
        if (DigitsOnly(RaiseAmount))
        {
            if(RaiseAmount == "")
            {
                await jsModule.InvokeVoidAsync("sendPlayerAction", tableId, nickname, action, 0);
            }
            else
                await jsModule.InvokeVoidAsync("sendPlayerAction", tableId, nickname, action, Convert.ToInt32(RaiseAmount));
        }
        else
        {
            string onlynumbers = nickname + " raise amount is only allowed to be numbers";
            await jsModule.InvokeVoidAsync("sendMessage", tableId, "System", onlynumbers);
        }
    }

    private async Task HandleChatKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private class CreateTableResponse
    {
        public string TableId { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        _instance = this;

        if (UserState.IsLoggedIn)
        {
            nickname = UserState.DisplayName ?? UserState.Username ?? "Player";

            if (joined && !nicknameSubmitted && !string.IsNullOrWhiteSpace(nickname))
            {
                await SubmitNickname();
            }
        }
    }


    private List<(string Sender, string Message, DateTime Timestamp)> chatMessages = new();

    [JSInvokable]
    public Task AddChatMessage(string sender, string message, DateTime timestamp)
    {
        chatMessages.Add((sender, message, timestamp));
        StateHasChanged();
        _ = JS.InvokeVoidAsync("scrollChatToBottom");
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task SetCommunityCards(string cardsJson)
    {
        Console.WriteLine($"[DEBUG] SetCommunityCards received JSON: {cardsJson}");

        var cards = System.Text.Json.JsonSerializer.Deserialize<List<Card>>(cardsJson);

        foreach (var c in cards)
        {
            Console.WriteLine($"[DEBUG] CommunityCard: Suit={c.Suit}, RankRaw={c.Rank}, Rank={ConvertRank(c.Rank)}");
        }
        communityCards = cards.Select(c => new Card
        {
            Suit = c.Suit,
            Rank = ConvertRank(c.Rank)
        }).ToList();
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task SetPlayerCards(string cardsJson)
    {
        Console.WriteLine($"[DEBUG] SetPlayerCards received JSON: {cardsJson}");
        var cards = System.Text.Json.JsonSerializer.Deserialize<List<Card>>(cardsJson);
        foreach (var c in cards)
        {
            Console.WriteLine($"[DEBUG] PlayerCard: Suit={c.Suit}, RankRaw={c.Rank}, Rank={ConvertRank(c.Rank)}");
        }
        myCards = cards.Select(c => new Card
        {
            Suit = c.Suit,
            Rank = ConvertRank(c.Rank)
        }).ToList();
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task SetGameWinRatio(bool Won)
    {
        Console.WriteLine($"[DEBUG] SetGaneWinRatio received Winner?: {Won}");
        if (Won)
        {
            gamesWon++;
        }
        gamesWinRation = gamesWon / gamesPlayed;
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task SetHandWinRatio(bool Won)
    {
        Console.WriteLine($"[DEBUG] SetHandWinRatio received Winner?: {Won}");
        if (Won)
        {
            handsWon++;
        }
        handsWinRation = handsWon / handsPlayed;
        return Task.CompletedTask;
    }

    [JSInvokable]
    public void SetPlayerList(List<string> playerList)
    {
        playersOnTable = playerList;
        StateHasChanged();
    }

    [JSInvokable]
    public void SetPlayerWallets(Dictionary<string, int> wallets)
    {
        playerWallets = wallets;
        StateHasChanged();
    }

    [JSInvokable]
    public void SetTablePot(int pot)
    {
        tablePot = pot;
        StateHasChanged();
    }

    [JSInvokable]
    public void ShowdownHands(Dictionary<string, List<string>> hands)
    {
        showdownHands = hands;
        StateHasChanged();
    }

    [JSInvokable]
    public void ClearShowdownHands()
    {
        showdownHands.Clear();
        StateHasChanged();
    }
}

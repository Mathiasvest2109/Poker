@page "/login"
@inject HttpClient Http
@using System.Net.Http.Json
@rendermode InteractiveServer
@inject UserState UserState
@inject NavigationManager NavigationManager

<h3>@(isCreatingUser ? "Create Account" : "Login")</h3>

<div>
    @if (isCreatingUser)
{
    <label>Display Name: </label>
    <input @bind="loginModel.DisplayName" /><br /><br />
}

    <label>Username: </label>
    <input @bind="loginModel.Username" /><br /><br />
    <label>Password: </label>
    <input @bind="loginModel.Password" type="password" /><br /><br />

       @if (isCreatingUser)
    {
        <button type="button" @onclick="HandleCreateAccount">Create Account</button>
        <button type="button" @onclick="() => isCreatingUser = false">Back to Login</button>
    }
    else
    {
        <button type="button" @onclick="HandleLogin">Login</button>
        <button type="button" @onclick="() => isCreatingUser = true">Create New Account</button>
    }
</div>

<p style="color:@messageColor">@responseMessage</p>

@code {
    private LoginRequest loginModel = new();
    private string responseMessage = string.Empty;
    private string messageColor = "black";
    private bool isCreatingUser = false;

    private async Task HandleLogin()
    {
         responseMessage = "Button clicked!"; // Immediate visual feedback
        messageColor = "blue";
        
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5005/api/auth/login", loginModel);

            var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

            if (response.IsSuccessStatusCode)
            {
                UserState.SetUser(result.Username, result.DisplayName, result.UserId);
                responseMessage = result?.Message ?? "Login successful";
                messageColor = "green";
                NavigationManager.NavigateTo("/lobby");
            }
            else
            {
                responseMessage = result?.Message ?? "Login failed";
                messageColor = "red";
            }
        }
        catch
        {
            responseMessage = "Error connecting to server.";
            messageColor = "red";
        }
    }

    private async Task HandleCreateAccount()
    {
        responseMessage = "Creating account...";
        messageColor = "blue";

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5005/api/auth/createUser", loginModel);
             var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

            if (response.IsSuccessStatusCode)
            {
                responseMessage = result?.Message ?? "Account created!";
                messageColor = "green";
                isCreatingUser = false; // Go back to login after creation
            }
            else
            {
                responseMessage = result?.Message ?? "Failed to create account.";
                messageColor = "red";
            }
        }
        catch
        {
            responseMessage = "Error connecting to server.";
            messageColor = "red";
        }
    }

    public class LoginRequest
    {
        public string Username { get; set; } = string.Empty;
        public string? DisplayName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        public string? Username { get; set; } = string.Empty;

        public string? DisplayName {get; set;} = string.Empty;
        
        public int UserId { get; set; }

        public string Message { get; set; }
    }
}
